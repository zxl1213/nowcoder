/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) :
        val(x), next(NULL) {
    }
};
*/
class Solution {
public:
    ListNode* deleteDuplication(ListNode* pHead){
    {
if(pHead==NULL){
  return NULL;
}
ListNode* fake=(ListNode*)malloc(sizeof(ListNode));
fake->next=pHead;
ListNode* prev=fake;
ListNode* p1=pHead;
ListNode* p2=pHead->next;
while(p2!=NULL){
  if(p1->val!=p2->val){
	  prev=p1;p1=p2;p2=p2->next;
	}
	else{
	  while(p2!=NULL&&p2->val==p1->val){
	  p2=p2->next;
	  }	  
	  ListNode* cur=p1;
	  while(cur!=p2){
	  ListNode* next=cur->next;
	  free(cur);
      cur=next;
	  }
	  //不考虑内存泄漏
	    prev->next=p2;
		p1=p2;
		if(p2!=NULL){
		p2=p2->next;
		}
	  }
	}
  
  pHead=fake->next;
  free(fake);
  return pHead;
}
    }
};
